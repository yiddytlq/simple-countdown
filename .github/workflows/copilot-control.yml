name: Copilot Control

on:
  issue_comment:
    types: [created]
  issues:
    types: [labeled]
  pull_request:
    types: [labeled]

jobs:
  manage-copilot:
    runs-on: ubuntu-latest
    steps:
      - name: Copilot Action Handler
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const isPR = context.payload.pull_request !== undefined;
            const issueOrPRNumber = isPR ? context.payload.pull_request.number : context.payload.issue.number;

            // Determine trigger type
            let triggerType = null;

            if (context.eventName === 'issue_comment') {
              const body = context.payload.comment.body.toLowerCase();
              if (body.includes('@copilot plan')) triggerType = 'plan';
              else if (body.includes('@copilot review')) triggerType = 'review';
              else if (body.includes('@copilot implement')) triggerType = 'implement';
            } else if (context.eventName === 'issues' || context.eventName === 'pull_request') {
              const label = context.payload.label.name.toLowerCase();
              if (label.startsWith('copilot:')) {
                triggerType = label.split(':')[1];
              }
            }

            // Handle Copilot assignment/reviewer
            if (['plan','review','implement'].includes(triggerType)) {
              if (isPR) {
                // Add Copilot as reviewer if not already
                const reviewers = context.payload.pull_request.requested_reviewers.map(r => r.login);
                if (!reviewers.includes('copilot')) {
                  await github.rest.pulls.requestReviewers({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    pull_number: issueOrPRNumber,
                    reviewers: ['copilot']
                  });
                }
              } else {
                // Add Copilot as assignee if not already
                const assignees = context.payload.issue.assignees.map(a => a.login);
                if (!assignees.includes('copilot')) {
                  await github.rest.issues.addAssignees({
                    owner: context.repo.owner,
                    repo: context.repo.repo,
                    issue_number: issueOrPRNumber,
                    assignees: ['copilot']
                  });
                }
              }
            }

            // Handle copilot:done
            if (context.eventName === 'issues' || context.eventName === 'pull_request') {
              const label = context.payload.label.name.toLowerCase();
              if (label === 'copilot:done') {
                // Remove Copilot as assignee
                await github.rest.issues.removeAssignees({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: issueOrPRNumber,
                  assignees: ['copilot']
                });
                // Remove Copilot as reviewer if PR
                if (isPR) {
                  const reviewers = context.payload.pull_request.requested_reviewers.map(r => r.login);
                  if (reviewers.includes('copilot')) {
                    await github.rest.pulls.removeRequestedReviewers({
                      owner: context.repo.owner,
                      repo: context.repo.repo,
                      pull_number: issueOrPRNumber,
                      reviewers: ['copilot']
                    });
                  }
                }
              }
            }
